// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Urbann.Data;

namespace Urbann.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Urbann.Data.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<int>("CountryId");

                    b.Property<string>("Street");

                    b.HasKey("AddressId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new { AddressId = 1, City = "Cracow", CountryId = 1, Street = "Tyniecka 22" },
                        new { AddressId = 2, City = "Cracow", CountryId = 1, Street = "Drukarska 10" },
                        new { AddressId = 3, City = "Rome", CountryId = 2, Street = "via catania 32" },
                        new { AddressId = 4, City = "Rome", CountryId = 2, Street = "via imperia 5" },
                        new { AddressId = 5, City = "Madrid", CountryId = 3, Street = "calle menorca 2" },
                        new { AddressId = 6, City = "Uppsala", CountryId = 4, Street = "kungsgatan 76" }
                    );
                });

            modelBuilder.Entity("Urbann.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new { CategoryId = 1, Name = "Factory" },
                        new { CategoryId = 2, Name = "Church" }
                    );
                });

            modelBuilder.Entity("Urbann.Data.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new { CountryId = 1, Name = "Poland" },
                        new { CountryId = 2, Name = "Italy" },
                        new { CountryId = 3, Name = "Spain" },
                        new { CountryId = 4, Name = "Sweden" }
                    );
                });

            modelBuilder.Entity("Urbann.Data.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName");

                    b.Property<int>("PlaceId");

                    b.HasKey("PhotoId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photos");

                    b.HasData(
                        new { PhotoId = 1, FileName = "1.jpeg", PlaceId = 1 },
                        new { PhotoId = 2, FileName = "2.jpeg", PlaceId = 1 },
                        new { PhotoId = 3, FileName = "3.jpeg", PlaceId = 1 },
                        new { PhotoId = 4, FileName = "4.jpeg", PlaceId = 1 },
                        new { PhotoId = 5, FileName = "5.jpeg", PlaceId = 2 },
                        new { PhotoId = 6, FileName = "6.jpeg", PlaceId = 2 }
                    );
                });

            modelBuilder.Entity("Urbann.Data.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("ThumbnailFileName");

                    b.HasKey("PlaceId");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("CategoryId");

                    b.ToTable("Places");

                    b.HasData(
                        new { PlaceId = 1, AddressId = 1, CategoryId = 1, Name = "Place 1", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 2, AddressId = 2, CategoryId = 1, Name = "Place 2", ThumbnailFileName = "2.jpeg" },
                        new { PlaceId = 3, AddressId = 3, CategoryId = 1, Name = "Place 3", ThumbnailFileName = "3.jpeg" },
                        new { PlaceId = 4, AddressId = 4, CategoryId = 2, Name = "Place 4", ThumbnailFileName = "4.jpeg" },
                        new { PlaceId = 5, AddressId = 5, CategoryId = 2, Name = "Place 5", ThumbnailFileName = "5.jpeg" },
                        new { PlaceId = 6, AddressId = 6, CategoryId = 2, Name = "Place 6", ThumbnailFileName = "6.jpeg" },
                        new { PlaceId = 10, CategoryId = 1, Name = "Place: 10", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 11, CategoryId = 1, Name = "Place: 11", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 12, CategoryId = 1, Name = "Place: 12", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 13, CategoryId = 1, Name = "Place: 13", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 14, CategoryId = 1, Name = "Place: 14", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 15, CategoryId = 1, Name = "Place: 15", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 16, CategoryId = 1, Name = "Place: 16", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 17, CategoryId = 1, Name = "Place: 17", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 18, CategoryId = 1, Name = "Place: 18", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 19, CategoryId = 1, Name = "Place: 19", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 20, CategoryId = 1, Name = "Place: 20", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 21, CategoryId = 1, Name = "Place: 21", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 22, CategoryId = 1, Name = "Place: 22", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 23, CategoryId = 1, Name = "Place: 23", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 24, CategoryId = 1, Name = "Place: 24", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 25, CategoryId = 1, Name = "Place: 25", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 26, CategoryId = 1, Name = "Place: 26", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 27, CategoryId = 1, Name = "Place: 27", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 28, CategoryId = 1, Name = "Place: 28", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 29, CategoryId = 1, Name = "Place: 29", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 30, CategoryId = 1, Name = "Place: 30", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 31, CategoryId = 1, Name = "Place: 31", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 32, CategoryId = 1, Name = "Place: 32", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 33, CategoryId = 1, Name = "Place: 33", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 34, CategoryId = 1, Name = "Place: 34", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 35, CategoryId = 1, Name = "Place: 35", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 36, CategoryId = 1, Name = "Place: 36", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 37, CategoryId = 1, Name = "Place: 37", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 38, CategoryId = 1, Name = "Place: 38", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 39, CategoryId = 1, Name = "Place: 39", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 40, CategoryId = 1, Name = "Place: 40", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 41, CategoryId = 1, Name = "Place: 41", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 42, CategoryId = 1, Name = "Place: 42", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 43, CategoryId = 1, Name = "Place: 43", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 44, CategoryId = 1, Name = "Place: 44", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 45, CategoryId = 1, Name = "Place: 45", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 46, CategoryId = 1, Name = "Place: 46", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 47, CategoryId = 1, Name = "Place: 47", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 48, CategoryId = 1, Name = "Place: 48", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 49, CategoryId = 1, Name = "Place: 49", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 50, CategoryId = 1, Name = "Place: 50", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 51, CategoryId = 1, Name = "Place: 51", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 52, CategoryId = 1, Name = "Place: 52", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 53, CategoryId = 1, Name = "Place: 53", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 54, CategoryId = 1, Name = "Place: 54", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 55, CategoryId = 1, Name = "Place: 55", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 56, CategoryId = 1, Name = "Place: 56", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 57, CategoryId = 1, Name = "Place: 57", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 58, CategoryId = 1, Name = "Place: 58", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 59, CategoryId = 1, Name = "Place: 59", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 60, CategoryId = 1, Name = "Place: 60", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 61, CategoryId = 1, Name = "Place: 61", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 62, CategoryId = 1, Name = "Place: 62", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 63, CategoryId = 1, Name = "Place: 63", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 64, CategoryId = 1, Name = "Place: 64", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 65, CategoryId = 1, Name = "Place: 65", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 66, CategoryId = 1, Name = "Place: 66", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 67, CategoryId = 1, Name = "Place: 67", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 68, CategoryId = 1, Name = "Place: 68", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 69, CategoryId = 1, Name = "Place: 69", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 70, CategoryId = 1, Name = "Place: 70", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 71, CategoryId = 1, Name = "Place: 71", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 72, CategoryId = 1, Name = "Place: 72", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 73, CategoryId = 1, Name = "Place: 73", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 74, CategoryId = 1, Name = "Place: 74", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 75, CategoryId = 1, Name = "Place: 75", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 76, CategoryId = 1, Name = "Place: 76", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 77, CategoryId = 1, Name = "Place: 77", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 78, CategoryId = 1, Name = "Place: 78", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 79, CategoryId = 1, Name = "Place: 79", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 80, CategoryId = 1, Name = "Place: 80", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 81, CategoryId = 1, Name = "Place: 81", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 82, CategoryId = 1, Name = "Place: 82", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 83, CategoryId = 1, Name = "Place: 83", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 84, CategoryId = 1, Name = "Place: 84", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 85, CategoryId = 1, Name = "Place: 85", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 86, CategoryId = 1, Name = "Place: 86", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 87, CategoryId = 1, Name = "Place: 87", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 88, CategoryId = 1, Name = "Place: 88", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 89, CategoryId = 1, Name = "Place: 89", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 90, CategoryId = 1, Name = "Place: 90", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 91, CategoryId = 1, Name = "Place: 91", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 92, CategoryId = 1, Name = "Place: 92", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 93, CategoryId = 1, Name = "Place: 93", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 94, CategoryId = 1, Name = "Place: 94", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 95, CategoryId = 1, Name = "Place: 95", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 96, CategoryId = 1, Name = "Place: 96", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 97, CategoryId = 1, Name = "Place: 97", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 98, CategoryId = 1, Name = "Place: 98", ThumbnailFileName = "1.jpeg" },
                        new { PlaceId = 99, CategoryId = 1, Name = "Place: 99", ThumbnailFileName = "1.jpeg" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Urbann.Data.Address", b =>
                {
                    b.HasOne("Urbann.Data.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Urbann.Data.Photo", b =>
                {
                    b.HasOne("Urbann.Data.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Urbann.Data.Place", b =>
                {
                    b.HasOne("Urbann.Data.Address", "Address")
                        .WithOne("Place")
                        .HasForeignKey("Urbann.Data.Place", "AddressId");

                    b.HasOne("Urbann.Data.Category", "Category")
                        .WithMany("Places")
                        .HasForeignKey("CategoryId");
                });
#pragma warning restore 612, 618
        }
    }
}
